04 : Controlling The Node Process In Containers
===============================================

04.22 : Section Intro : Controlling the Node Process 
----------------------------------------------------

- Node, and how it runs in a container {in Linux}

- Node Process Management
- Lifetime Events in a Container 
- Correcting Node Assumptions 
- Properly Replacing Node 


04.23 : Node Process Management
-------------------------------
- the best ways to start node in containers 

- 1 of the most important pieces to node DockerFile is how that CMD is structured 

- no nodemon, forever, or pm2 on a server
- we'll use nodemon in dev for file watching later
- Docker does a good job of the above tools

- docker manager app start, stop, restart, healthchecks, etc
- node is multi-threaded : Docker manages multiple "replicas" - most docker vms have built-in cpus/etc to handle threads 

- one npm/node problem out of the box : They don't listen for proper shutdown signals by default
  - need to handle this in a docker world


04.24 : The Truth About the PID 1 Problem 
-----------------------------------------
- handling node as the root container process 
- there are shutdown issues for npm/node inside a container 

- in Linux, the init process, or PID 1 process, is the 1st process in a system {or container}
  - also known as 'init'

- in a Linux os, the PID 1/init process has additional responsibilities 
  - reap 'zombie' processes, ie, processes that have no parent
  - pass signals to sub-processes 
    - important when you want to shutdown a process 

- Zombie not a big Node issue {keep aware but not a common issue w/Node in a container}
- Focus on proper Node shutdown 

Proper CMD for Healthy Shutdown in Node 
---------------------------------------
- Docker uses Linux signals to stop app 
  - SIGINT - CTRL C
  - SIGTERM - Docker container stop, rolling update 
  - SIGKILL {this is rare - also means something major bad has occurred }
- SIGINT / SIGTERM allow graceful stop 
- npm does NOT respond to SIGINT/SIGTERM 

- Node does NOT respond by default, HAVE to add code

- Docker provides an init PID 1 replacement option 


04.25 : Proper Node Shutdown Options 
------------------------------------
- Temp : use "--init" to fix ctrl-c for now
- Workaround : add 'tini' to your image 
- Production : your app captures SIGINT for proper exit  

- {Temp} Run any node with Docker '--init' CLI parm to handle signals (temp solution)

- {Workaround} add 'tini' to your Dockerfile, then use it in CMD 
  - RUN apk add --no-cache tini 
  - ENTRYPOINT ["/sbin/tini", "--"]
  - CMD ["node", "./bin/www"]

- {Production} 
  - use JS snippet toproperly capture signals 
  - code provided in course git repo 
    - ./sample-graveful-shutdown/sample.js 


04.26 : Assignment : Writing Node Dockerfiles 
---------------------------------------------
- make a Dockerfile for existing Node app 
- use ./assignment-dockerfile/Dockerfile as a template 
- start with Node 10.15 {or later} on alpine 
- install tini, start node with tini 
- copy package/lock files first, then npm, then copy 


04.27 : Assignment Answers : Writing Dockerfiles 
------------------------------------------------
- google 'apk tini for docker'
- see DockerFile for deatils 


04.28 : Assignment : Testing Graceful Shutdowns 
-----------------------------------------------
- testing good & bad shutdowns 
- using above Dockerfile - will change/rename to handle different examples
- run w/tini built-in, try to ctrl-c
- run w/tini built-in, try docker stop {from another session}
- remove ENTRYPOINT, rebuild
- add '--init' to run command, ctrl-c/stop 
- BONUS : add signal watch code {from repo} 


04.29 : Assignment Answers : Testing Graceful Shutdown
------------------------------------------------------
- w/tini running - both ctrl_c & docker stops return immediately
  - not a healthy shutdown cuz there is no code to handle the signals 
  - do a 'docker top ##' - see tini running 
- comment out ENTRYPOINT, start up 
  - docker top does NOT show tini running 
  - 'docker stop' - waits 10 seconds and then forces a kill 
  - start up using '--init' 
    - docker top - shows init running along w/app 
    - this way, 'docker stop ##' stops it immediately 

